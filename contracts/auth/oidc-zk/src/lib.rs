
use std::borrow::Cow;

use ark_ff::fields::arithmetic::InvalidBigInt;
use kimchi::error::VerifyError;
use kimchi::proof::{PointEvaluations, ProofEvaluations, ProverCommitments, RecursionChallenge};
use mina_curves::pasta::{Fp, Fq, Pallas};
use mina_p2p_messages::bigint::BigInt;
use mina_tree::proofs::field::FieldWitness;
use mina_tree::proofs::util::extract_bulletproof;
use mina_tree::proofs::verification::VK;
use near_sdk::{near, serde::{Serialize, Deserialize}};
use o1_utils::FieldHelpers;
use once_cell::sync::Lazy;

use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use mina_p2p_messages::v2::PicklesProofProofsVerified2ReprStableV2;
use mina_tree::{
    proofs::verifiers::make_zkapp_verifier_index,
    VerificationKey,
};
use mina_p2p_messages::{
    v2::MinaBaseVerificationKeyWireStableV1,
    binprot::BinProtRead,
};
use poly_commitment::commitment::CommitmentCurve;
use poly_commitment::evaluation_proof::OpeningProof;
use poly_commitment::PolyComm;

pub type VerifierIndex<F> = kimchi::verifier_index::VerifierIndex<
    <F as FieldWitness>::OtherCurve,
    OpeningProof<<F as FieldWitness>::OtherCurve>,
>;
pub type ProverIndex<F> = kimchi::prover_index::ProverIndex<
    <F as FieldWitness>::OtherCurve,
    OpeningProof<<F as FieldWitness>::OtherCurve>,
>;
pub type ProverProof<F> = kimchi::proof::ProverProof<
    <F as FieldWitness>::OtherCurve,
    OpeningProof<<F as FieldWitness>::OtherCurve>,
>;


/// Note: Refactor when `core::array::try_map` is stable
/// https://github.com/rust-lang/rust/issues/79711
pub fn try_array_into_with<'a, T, E, U, F, const N: usize>(
    value: &'a [T; N],
    fun: F,
) -> Result<[U; N], E>
where
    T: 'a,
    F: Fn(&T) -> Result<U, E>,
    U: std::fmt::Debug,
{
    Ok(value
        .iter()
        .map(fun)
        .collect::<Result<Vec<_>, _>>()?
        .try_into()
        .unwrap()) // Never fail: `value` contains `N` elements
}

fn get_challenge_polynomial_commitments_padding() -> (BigInt, BigInt) {
    static PADDING: Lazy<(BigInt, BigInt)> = Lazy::new(|| {
        let first = Fp::from_bytes(
            "8063668238751197448664615329057427953229339439010717262869116690340613895496".as_bytes(),
        )
        .unwrap();
        let second = Fp::from_bytes(
            "2694491010813221541025626495812026140144933943906714931997499229912601205355".as_bytes(),
        )
        .unwrap();

        (first.into(), second.into())
    });

    PADDING.clone()
}

pub fn make_padded_proof_from_p2p(
    PicklesProofProofsVerified2ReprStableV2 {
        statement,
        prev_evals: _, // unused
        proof,
    }: &PicklesProofProofsVerified2ReprStableV2,
) -> Result<ProverProof<Fq>, InvalidBigInt> {
    let of_coord =
        |(a, b): &(BigInt, BigInt)| Ok(Pallas::of_coordinates(a.to_field()?, b.to_field()?));

    let make_poly = |poly: &(BigInt, BigInt)| {
        Ok(PolyComm {
            elems: vec![of_coord(poly)?],
        })
    };

    let w_comm: [PolyComm<Pallas>; 15] =
        try_array_into_with(&proof.commitments.w_comm, make_poly)?;
    let z_comm: PolyComm<Pallas> = make_poly(&proof.commitments.z_comm)?;
    let t_comm: PolyComm<Pallas> = {
        let elems = proof
            .commitments
            .t_comm
            .iter()
            .map(of_coord)
            .collect::<Result<_, _>>()?;
        PolyComm { elems }
    };

    let bulletproof = &proof.bulletproof;

    let lr = &bulletproof.lr;
    let lr: Vec<(Pallas, Pallas)> = lr
        .iter()
        .map(|(a, b)| Ok((of_coord(a)?, of_coord(b)?)))
        .collect::<Result<_, _>>()?;

    let delta: Pallas = of_coord(&bulletproof.delta)?;
    let z1: Fq = bulletproof.z_1.to_field()?;
    let z2: Fq = bulletproof.z_2.to_field()?;

    let sg: Pallas = of_coord(&bulletproof.challenge_polynomial_commitment)?;

    let evals = &proof.evaluations;

    // let to_fields = |x: &Vec<BigInt>| x.iter().map(BigInt::to_field).collect();
    // let to_pt_eval = |(first, second): &(Vec<BigInt>, Vec<BigInt>)| PointEvaluations {
    //     zeta: to_fields(first),
    //     zeta_omega: to_fields(second),
    // };

    // let to_fields = |x: &Vec<BigInt>| x.iter().map(BigInt::to_field).collect();
    let to_pt_eval = |(first, second): &(BigInt, BigInt)| {
        Ok(PointEvaluations {
            zeta: vec![first.to_field::<Fq>()?],
            zeta_omega: vec![second.to_field::<Fq>()?],
        })
    };

    let evals: ProofEvaluations<PointEvaluations<Vec<Fq>>> = ProofEvaluations {
        w: crate::try_array_into_with(&evals.w, to_pt_eval)?,
        z: to_pt_eval(&evals.z)?,
        s: crate::try_array_into_with(&evals.s, to_pt_eval)?,
        generic_selector: to_pt_eval(&evals.generic_selector)?,
        poseidon_selector: to_pt_eval(&evals.poseidon_selector)?,
        coefficients: crate::try_array_into_with(&evals.coefficients, to_pt_eval)?,
        complete_add_selector: to_pt_eval(&evals.complete_add_selector)?,
        mul_selector: to_pt_eval(&evals.mul_selector)?,
        emul_selector: to_pt_eval(&evals.emul_selector)?,
        endomul_scalar_selector: to_pt_eval(&evals.endomul_scalar_selector)?,
        range_check0_selector: None,
        range_check1_selector: None,
        foreign_field_add_selector: None,
        foreign_field_mul_selector: None,
        xor_selector: None,
        rot_selector: None,
        lookup_aggregation: None,
        lookup_table: None,
        lookup_sorted: [None, None, None, None, None],
        runtime_lookup_table: None,
        runtime_lookup_table_selector: None,
        xor_lookup_selector: None,
        lookup_gate_lookup_selector: None,
        range_check_lookup_selector: None,
        foreign_field_mul_lookup_selector: None,
        public: None,
    };

    let ft_eval1: Fq = proof.ft_eval1.to_field()?;

    let old_bulletproof_challenges = &statement
        .proof_state
        .messages_for_next_wrap_proof
        .old_bulletproof_challenges;
    let old_bulletproof_challenges: Vec<[Fq; 15]> = extract_bulletproof(&[
        old_bulletproof_challenges.0[0].0.clone(),
        old_bulletproof_challenges.0[1].0.clone(),
    ]);

    let make_poly = |poly: &(BigInt, BigInt)| {
        let point = of_coord(poly)?;
        Ok(PolyComm { elems: vec![point] })
    };

    let mut challenge_polynomial_commitments = Cow::Borrowed(
        &statement
            .messages_for_next_step_proof
            .challenge_polynomial_commitments,
    );

    // Prepend padding:
    // https://github.com/MinaProtocol/mina/blob/bfd1009abdbee78979ff0343cc73a3480e862f58/src/lib/pickles/verify.ml#L361C1-L364C51
    while challenge_polynomial_commitments.len() < 2 {
        let padding = get_challenge_polynomial_commitments_padding();
        challenge_polynomial_commitments
            .to_mut()
            .push_front(padding);
    }

    let challenge_polynomial_commitments: Vec<PolyComm<Pallas>> = challenge_polynomial_commitments
        .iter()
        .map(make_poly)
        .collect::<Result<_, _>>()?;

    // Or pad with `Wrap_hack.pad_accumulator`
    assert_eq!(old_bulletproof_challenges.len(), 2);
    assert_eq!(challenge_polynomial_commitments.len(), 2);
    let prev_challenges: Vec<RecursionChallenge<Pallas>> = old_bulletproof_challenges
        .iter()
        .zip(challenge_polynomial_commitments)
        .map(|(chals, comm)| RecursionChallenge::new(chals.to_vec(), comm))
        .collect();

    Ok(ProverProof::<Fq> {
        commitments: ProverCommitments {
            w_comm,
            z_comm,
            t_comm,
            lookup: None,
        },
        proof: OpeningProof {
            lr,
            delta,
            z1,
            z2,
            sg,
        },
        evals,
        ft_eval1,
        prev_challenges,
    })
}


fn verify_with(
    verifier_index: &VerifierIndex<Fq>,
    proof: &ProverProof<Fq>,
    public_input: &[Fq],
) -> Result<(), VerifyError> {
    use kimchi::groupmap::GroupMap;
    use kimchi::mina_curves::pasta::PallasParameters;
    use mina_poseidon::sponge::{DefaultFqSponge, DefaultFrSponge};
    use poly_commitment::evaluation_proof::OpeningProof;

    type SpongeParams = mina_poseidon::constants::PlonkSpongeConstantsKimchi;
    type EFqSponge = DefaultFqSponge<PallasParameters, SpongeParams>;
    type EFrSponge = DefaultFrSponge<Fq, SpongeParams>;

    let group_map = GroupMap::<Fp>::setup();

    kimchi::verifier::verify::<Pallas, EFqSponge, EFrSponge, OpeningProof<Pallas>>(
        &group_map,
        verifier_index,
        proof,
        public_input,
    )
}

// type SpongeParams = PlonkSpongeConstantsKimchi;
// type VestaBaseSponge = DefaultFqSponge<VestaParameters, SpongeParams>;
// type VestaScalarSponge = DefaultFrSponge<Fp, SpongeParams>;
// type PallasBaseSponge = DefaultFqSponge<PallasParameters, SpongeParams>;
// type PallasScalarSponge = DefaultFrSponge<Fq, SpongeParams>;

#[derive(Serialize, Deserialize)]
pub struct O1jsProof {
    max_proofs_verified: u32,
    proof: String, // base64 encoded proof
    public_input: Vec<String>,
    public_output: Vec<String>,
}

#[near(contract_state)]
#[derive(Default)]
pub struct OIDCzkAuthContract {}

#[near]
impl OIDCzkAuthContract {
    #[init]
    pub fn new() -> Self {
        Self { }
    }

    /// Verifies a zkapp proof
    pub fn verify_zkapp_proof(
        &self,
        verification_key: &str,
        proof: &O1jsProof,
    ) -> bool {
        // Decode base64 proof string
        let proof_bytes = BASE64.decode(&proof.proof).expect("Invalid proof encoding");
        let vk_bytes = BASE64.decode(verification_key).expect("Invalid verification key encoding");
        
        let vk = MinaBaseVerificationKeyWireStableV1::binprot_read(&mut vk_bytes.as_slice()).expect("Invalid verification key format");
        let vk: VerificationKey = (&vk).try_into().unwrap();
        let verifier_index = make_zkapp_verifier_index(&vk);

        let vk = VK {
            commitments: *vk.wrap_index.clone(),
            index: &verifier_index,
            data: (),
        };
        
        let pickles_proof = PicklesProofProofsVerified2ReprStableV2::binprot_read(&mut proof_bytes.as_slice()).expect("Invalid proof format");

        let proof = make_padded_proof_from_p2p(&pickles_proof).expect("Invalid proof format");

        // Verify the proof
        let result = verify_with(vk.index, &proof, &vec![]);
        println!("result: {:?}", result);
        true
    }
    
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_verify_proof() {
        let contract = OIDCzkAuthContract::default();

        let proof = O1jsProof {
            max_proofs_verified: 0,
            proof: "".to_string(),
            public_input: vec![],
            public_output: vec![],
        };

        let vk = "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".to_string();

        assert!(contract.verify_zkapp_proof(&vk, &proof));
    }
}